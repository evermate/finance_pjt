commit ebd0822d85a160e78342170c08b12b5dfb4b147e
Author: kwakseoh <kwakseoh@naver.com>
Date:   Fri May 23 17:07:58 2025 +0900

    feat: 추천 시스템 프로토타입 드롭다운 구현

diff --git a/backend/products/views.py b/backend/products/views.py
index 63eaafa..bac7ab1 100644
--- a/backend/products/views.py
+++ b/backend/products/views.py
@@ -1,57 +1,107 @@
-from rest_framework import viewsets
+# products/views.py
+
+from datetime import date
+
+from rest_framework import viewsets, filters
 from rest_framework.decorators import action
 from rest_framework.response import Response
 from rest_framework.pagination import PageNumberPagination
-from django.db.models import Prefetch, OuterRef, Subquery, FloatField
-from rest_framework.permissions import AllowAny
+from rest_framework.permissions import IsAuthenticated
+from rest_framework.authentication import TokenAuthentication
+from django.db.models import OuterRef, Subquery, FloatField
 
 from .models import Bank, DepositProduct, InterestOption
 from .serializers import BankSerializer, DepositProductSerializer, InterestOptionSerializer
 
 
-# 📄 기본 페이지네이션 설정
+# ─── 기본 페이지네이션 설정 ────────────────────────────────────────
 class StandardResultsPagination(PageNumberPagination):
-    page_size = 10
+    page_size = 10  # 한 페이지당 10개씩 반환
 
 
-# 📄 은행 API
+# ─── 은행 API ─────────────────────────────────────────────────────
 class BankViewSet(viewsets.ReadOnlyModelViewSet):
+    """
+    은행 목록 및 상세 조회
+    """
     queryset = Bank.objects.all()
     serializer_class = BankSerializer
     lookup_field = 'fin_co_no'
 
 
-# 📄 정기예금/적금 API
+# ─── 예금/적금 상품 API ────────────────────────────────────────────
 class DepositProductViewSet(viewsets.ModelViewSet):
-    permission_classes = [AllowAny]
-    queryset = DepositProduct.objects.all()
+    queryset = DepositProduct.objects.select_related('bank').prefetch_related('options')
     serializer_class = DepositProductSerializer
+    filter_backends = [filters.SearchFilter, filters.OrderingFilter]
+    search_fields = ['fin_prdt_nm', 'bank__kor_co_nm']
+    ordering_fields = ['dcls_strt_day', 'fin_prdt_nm']
 
-    @action(detail=False, methods=['get'], url_path='recommend')
-    def recommend(self, request):
-        top_n = int(request.query_params.get('top_n', 5))
-        min_term = request.query_params.get('min_term')
-        max_term = request.query_params.get('max_term')
+    @action(
+        detail=False, methods=['get'], url_path='recommend_by_profile',
+        authentication_classes=[TokenAuthentication],
+        permission_classes=[IsAuthenticated]
+    )
+    def recommend_by_profile(self, request):
+        asset_param = request.query_params.get('asset')
+        top_n       = int(request.query_params.get('top_n', 5))
+        if asset_param is None:
+            return Response({"error": "asset 파라미터는 필수입니다."}, status=400)
+        try:
+            asset = float(asset_param)
+        except ValueError:
+            return Response({"error": "asset은 숫자 형태여야 합니다."}, status=400)
 
-        products = DepositProduct.objects.select_related('bank') \
-                                         .prefetch_related('options') \
-                                         .all()
+        bd = getattr(request.user, 'birth_date', None)
+        if not bd:
+            return Response({"error": "생년월일 정보가 없습니다."}, status=400)
+        today = date.today()
+        age   = today.year - bd.year - ((today.month, today.day) < (bd.month, bd.day))
 
+        four_banks     = ["국민은행", "하나은행", "신한은행", "우리은행"]
+        TERM_THRESHOLD = 12
         recs = []
-        for prod in products:
+
+        for prod in self.queryset:
+            # 40대 이상은 4대 은행만, 그리고 단기 상품(≤12개월)만
+            if age >= 40:
+                if prod.bank.kor_co_nm not in four_banks:
+                    continue
+
             for opt in prod.options.all():
-                if not opt.save_trm or not opt.intr_rate:
+                if not opt.save_trm or opt.intr_rate is None:
                     continue
                 try:
                     term = int(opt.save_trm)
                     rate = float(opt.intr_rate)
                 except (TypeError, ValueError):
                     continue
-                if min_term and term < int(min_term):
-                    continue
-                if max_term and term > int(max_term):
-                    continue
-                annualized = rate * (12 / term)
+
+                # 20대 이하
+                if age <= 29:
+                    if asset > 100_000_000:
+                        # 장기만(12개월 초과)
+                        if term <= TERM_THRESHOLD:
+                            continue
+                    else:
+                        # 단기만(12개월 이하)
+                        if term > TERM_THRESHOLD:
+                            continue
+
+                # 30대 (30 ≤ age < 40)
+                elif age < 40:
+                    if asset > 150_000_000:
+                        if term <= TERM_THRESHOLD:
+                            continue
+                    else:
+                        if term > TERM_THRESHOLD:
+                            continue
+
+                # 40대 이상(else 블록): 위에서 4대 은행만 필터링 했으니, 단기만(12개월 이하)
+                else:
+                    if term > TERM_THRESHOLD:
+                        continue
+
                 recs.append({
                     'fin_prdt_cd': prod.fin_prdt_cd,
                     'fin_prdt_nm': prod.fin_prdt_nm,
@@ -59,41 +109,15 @@ class DepositProductViewSet(viewsets.ModelViewSet):
                         'fin_co_no': prod.bank.fin_co_no,
                         'kor_co_nm': prod.bank.kor_co_nm,
                     },
-                    'option_id': opt.id,
-                    'save_trm': term,
-                    'intr_rate': rate,
-                    'annualized_rate': round(annualized, 4),
-                    'score': round(annualized, 4),
+                    'option_id':    opt.id,
+                    'save_trm':     term,
+                    'intr_rate':    rate,
                 })
 
-        top_recs = sorted(recs, key=lambda x: x['score'], reverse=True)[:top_n]
+        top_recs = sorted(recs, key=lambda x: x['intr_rate'], reverse=True)[:top_n]
         return Response(top_recs)
 
-    @action(detail=False, methods=['get'], url_path='sorted')
-    def sorted(self, request):
-        term = request.query_params.get('term')
-        product_type = request.query_params.get('type', 'saving')  # 기본: 적금
-    
-        if term is None:
-            return Response({"error": "term query param is required"}, status=400)
-    
-        rate_subquery = InterestOption.objects.filter(
-            product=OuterRef('pk'),
-            save_trm=term,
-            intr_rate__isnull=False
-        ).order_by('-intr_rate').values('intr_rate')[:1]
-    
-        products = DepositProduct.objects.filter(product_type=product_type) \
-            .annotate(top_rate=Subquery(rate_subquery, output_field=FloatField())) \
-            .filter(top_rate__isnull=False) \
-            .order_by('-top_rate') \
-            .prefetch_related('options', 'bank')
-    
-        serializer = self.get_serializer(products, many=True)
-        return Response(serializer.data)
-
-
-# 📄 금리 옵션 API
+# ─── 금리 옵션 API ────────────────────────────────────────────────────
 class InterestOptionViewSet(viewsets.ReadOnlyModelViewSet):
     queryset = InterestOption.objects.select_related('product')
     serializer_class = InterestOptionSerializer
